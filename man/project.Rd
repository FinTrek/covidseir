% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.R
\name{project}
\alias{project}
\title{Project a SEIR fit}
\usage{
project(
  obj,
  forecast_days = 30,
  f_s_fixed_start = NULL,
  f_s_fixed = NULL,
  iter = seq_along(obj$post$R0),
  ...
)
}
\arguments{
\item{obj}{Output from \code{\link[=fit_seir]{fit_seir()}}.}

\item{forecast_days}{Number of forecast days.}

\item{f_s_fixed_start}{Optional day to start changing f. Must be set if
\code{f_s_fixed} is set.}

\item{f_s_fixed}{Optional fixed f values for forecast. Should be length
\code{forecast_days - (f_s_fixed_start - nrow(daily_cases) - 1)}. I.e. one value
per day after \code{f_s_fixed_start} day.}

\item{iter}{MCMC iterations to include. Defaults to all.}

\item{...}{Other arguments to pass to \code{\link[rstan:sampling]{rstan::sampling()}}.}
}
\value{
A data frame:
\describe{
\item{day}{Day}
\item{data_type}{Data-type column from the case data}
\item{mu}{Expected number of cases}
\item{y_rep}{Posterior predictive replicate observation}
\item{phi}{Posterior draw of phi, the NB2 dispersion parameter, if included}
\item{.iteration}{The MCMC iteration}
}
}
\description{
Project a fit from \code{\link[=fit_seir]{fit_seir()}}, possibly with a forecast.
}
\details{
Set a \code{\link[future:plan]{future::plan()}} and this function will operate in parallel
across MCMC iterations using \pkg{furrr}.
}
\examples{
cases <- c(
  0, 0, 1, 3, 1, 8, 0, 6, 5, 0, 7, 7, 18, 9, 22, 38, 53, 45, 40,
  77, 76, 48, 67, 78, 42, 66, 67, 92, 16, 70, 43, 53, 55, 53, 29,
  26, 37, 25, 45, 34, 40, 35
)
# Example fixed sample fractions:
s1 <- c(rep(0.1, 13), rep(0.2, length(cases) - 13))

# To use parallel processing:
# options(mc.cores = parallel::detectCores() / 2)

m <- fit_seir(
  cases,
  iter = 150,
  chains = 1,
  samp_frac_fixed = s1
)
print(m)

p <- project(m)
p

# library(ggplot2)
# plot_ts <- function(p) {
#   ggplot(p, aes(day, mu, group = .iteration)) +
#     geom_line(alpha = 0.4) +
#     geom_point(aes(y = y_rep), alpha = 0.2, pch = 21) +
#     geom_point(aes(x = day, y = cases), data.frame(day = seq_along(cases), cases),
#       colour = "red", inherit.aes = FALSE
#     ) +
#     labs(y = "Reported cases", x = "Day")
# }
# plot_ts(p)

p <- project(m,
  forecast_days = 100,
  f_s_fixed_start = 53,
  f_s_fixed = c(rep(0.7, 60), rep(0.2, 30)),
  iter = 1:10
)
p
# plot_ts(p)
}
